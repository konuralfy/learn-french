import React, {Component} from 'react';
import { StatusBar,StyleSheet } from 'react-native';
import { Container, Header, Left, Body, Right, Button, Title, Text, Content, Grid, Col,Row, H1 } from 'native-base';
import Icon from 'react-native-vector-icons/FontAwesome';
import firebase from 'react-native-firebase';
import changeNavigationBarColor, {
  HideNavigationBar,
  ShowNavigationBar,
} from 'react-native-navigation-bar-color';


class Home extends Component {

  componentWillMount(){
     changeNavigationBarColor("#000000");

    var PushNotification = require('react-native-push-notification');

    firebase.messaging().onTokenRefresh(fcmToken => {
      fetch('http://192.168.1.22:3000/deneme?fe=fe')
        .then(function(response){

        })
        .catch(function(error) {
        console.log('There has been a problem with your fetch operation: ');
        });
    });
/*
    PushNotification.localNotification({
    id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    ticker: "My Notification Ticker", // (optional)
    autoCancel: true, // (optional) default: true
    largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    subText: "Don't forget me!", // (optional) default: none
    color: "red", // (optional) default: system default
    vibrate: true, // (optional) default: true
    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    tag: 'some_tag', // (optional) add tag to message
    group: "group", // (optional) add group to message
    ongoing: false, // (optional) set whether this is an "ongoing" notification
    priority: "high", // (optional) set notification priority, default: high
    visibility: "private", // (optional) set notification visibility, default: private
    importance: "high", // (optional) set notification importance, default: high

    title: "Learn French", // (optional)
    message: "New French Word!", // (required)
});*/
  }

  componentDidMount() {
      this.onTokenRefreshListener = firebase.messaging().onTokenRefresh(fcmToken => {
        fetch('http://192.168.1.22:3000/deneme?fe=fe')
          .then(function(response){

          })
          .catch(function(error) {
          console.log('There has been a problem with your fetch operation: ');
          });
      });
  }

  componentWillUnmount() {
      this.onTokenRefreshListener();
  }

  createWordCards(){
    var wordCards = [];
    var french_words = ["Coûte",
                "Répéter",
                "Aide",
                "Comprendre",
                "Toilettes"];

    var english_meanings = ["Cost",
                "Repeat",
                "Help",
                "Understand",
                "Bathroom"];
    var french_phrase = ["Combien ça",
                "Pourriez-vous",
                "Pouvez-vous",
                "Je ne",
                "Où sont les"];
    var french_phrase_bold = [" coûte ",
                " répéter ",
                " m’aider ",
                " comprends ",
                "  toilettes "];
    var french_phrase_bold_after = ["?",
                ", s’il vous plaît?",
                ", s’il vous plaît?",
                "pas.",
                "?"];
    var english_phrase = ["How much does that cost ?",
                "Could you repeat (that), please ?",
                "Can you help me, please?",
                "I don't understand.",
                "Where is the bathroom?"];



    for(let i = 0; i < 5; i++){
      wordCards.push(
        <Row key="">
        <Col style={{ height: 200,borderBottomWidth: 5, borderBottomColor: '#2B3252' }}>
          <Text style={styles.french_word}> {french_words[i]} </Text>
          <Text style={styles.english_meaning}> {english_meanings[i]} </Text>
          <Text style={styles.french_phrase}> {french_phrase[i]} <Text style={styles.french_phrase_bold}>{french_phrase_bold[i]}</Text> {french_phrase_bold_after[i]} </Text>
          <Text style={styles.english_phrase}> {english_phrase[i]}</Text>
        </Col>
        </Row>
      )
    }
    return wordCards;
  }


  render () {
    return (
      <Container>
      <Header style={{ backgroundColor: '#2B3252' }} androidStatusBarColor="#2B3252" >
          <Left>
            <Button transparent>
              <Icon name='bars' color="white" />
            </Button>
          </Left>
          <Body>
            <Title>Home</Title>
          </Body>

        </Header>
        <Content>
        <Grid>
          { this.createWordCards() }
        </Grid>
        </Content>


      </Container>
    );
  }
}

const styles = StyleSheet.create({
  french_word: {
    marginLeft: 35,
    marginTop: 15,
    fontSize: 35,
    fontFamily: 'sans-serif-medium'
  },
  english_meaning: {
    marginLeft: 39,
    marginTop: 7,
    fontSize: 27,
    fontFamily: 'sans-serif-light'
  },
  french_phrase: {
    marginLeft: 42,
    marginTop: 22,
    fontSize: 20,
    fontStyle: 'italic',
    fontFamily: 'sans-serif-thin'
  },
  french_phrase_bold: {
    marginLeft: 42,
    marginTop: 7,
    fontSize: 20,
    fontStyle: 'italic',
    fontFamily: 'sans-serif-thin',
    fontWeight: "bold"
  },
  english_phrase: {
    marginLeft: 42,
    marginTop: 8,
    fontSize: 20,
    fontFamily: 'sans-serif-thin'
  }

});

export default Home;
